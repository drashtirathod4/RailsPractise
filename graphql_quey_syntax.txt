# my_authors
{
  myAuthors{
    name
    myArticlesCount
    myArticles {
    	title
      description
    }
  }
}

# my_author(id)
{
  myAuthor(id: 2){
    name
    myArticlesCount
    myArticles {
    	title
      description
    }
  }
}

# new Author create 
mutation{
  createMyAuthor(input:{
    name:"Test"
  }) {
   author {
    	id,
    	name
  	}
    errors
	}
} 

# update author
mutation{
  updateMyAuthor(input:{
    id: 1
    name:"Article 1"
  }) {
   author {
    	name
  	}
    errors
	}
}

# Delete Author
mutation{
  deleteMyAuthor(input:{
    id: 5
  }) {
    errors
    message
	}
}


# my_articles
{
  myArticles{
    title
    description
    myAuthorId
  }
}

# my_article(id)
{
  myArticle(id: 2){
    title
    description
    myAuthorId
  }
}

# new article create
mutation{
  createMyArticle(input:{
    title:"Test Article"
    description:"Test Description"
    myAuthorId: 1
  }) {
   article {
    	title,
    	description
  	}
    errors
	}
}

# Update Article
mutation{
  updateMyArticle(input:{
    id: 3
    title:"Edited Title"
    description:"Edited"
  }) {
   article {
    	title
    	description
  	}
    errors
	}
}

# Delete Article
mutation{
  deleteMyArticle(input:{
    id: 5
  }) {
    errors
    message
	}
}


# Aliases Example :
{
  myArticles{
    Article_Title: title
    description
  }
}

# Operation name example :
# "firstQuery" and "secondQuery" are the operation names
query firstQuery{ 
	myAuthor(id: 2){
    id
    authorName: name
    allArticles: myArticles{
      title
    }
  }
}

query secondQuery{ 
	myAuthor(id: 3){
    id
    authorName: name
    allArticles: myArticles{
      title
    }
  }
}

# Variables Example :
query Author($authorId: ID!){ 
	myAuthor(id: $authorId){
    id
    authorName: name
    allArticles: myArticles{
      title
    }
  }
}
-> Exclamation mark here for not null - The id shouldn't be null.
-> pass query variable like this "Query Variables" section on graphql video
{
  "authorId": 2
}

# Fragments example
query firstQuery{ 
	myAuthors {
    ... AuthorDetails
  }
}

query secondQuery{ 
	myAuthors{
    ... AuthorDetails
  }
}

fragment AuthorDetails on MyAuthor{
  id
  authorName: name
  allArticles: myArticles{
    title
    description
  }
}

# Directives Example
# @include
{
	myArticles {
    title
    description @include(if: true)
  }
}

# @skip
{
	myArticles {
    title
    description @skip(if: true)
  }
}

# Introspection
# To see which types are available
{
  __schema {
    types {
      name
    }
  }
} 

# To see what queries are available
{
  __schema {
    queryType {
      name
    }
  }
} 

# To examine one specific type 
# kind to know is it an interface or an object?
{
  __type(name: "MyAuthor") {
    name
    kind 
  }
}

# To know what fields are available?
{
  __type(name: "MyAuthor") {
    name
    fields {
      name
      type {
        name
        kind
      }
    }
  }
}

# To ask the system for documentation
{
  __type(name: "MyAuthor") {
    name
    description
  }
}

# Pagination query
{
  myAuthorsConnection(first:5, before: "Ng==") {
    totalCount
    pageInfo {
      endCursor
      startCursor
      hasPreviousPage
      hasNextPage
    }
    edges {
      cursor
      node {
        name
        myArticles {
          title
          description
        }
      }
    }
  }
}


# ------------------------------- Authorization in GraphQL ---------------------------------------

# create new user
mutation {
  createMyUser(
    name: "Drashti",
    authProvider: {
      credentials: {
        email: "drashti@mail.com",
        password: "123456"
      }
  	}
  ) {
    id
    name
    email
  }
}

# ------------------ To sign in the user -------------------- 
mutation {
  signInMyUser (
    credentials: {
      email: "drashti@mail.com",
      password: "123456"
    }
  ) {
    token
    myUser {
      id
    }
  }
}

--> It will return this as a result :
{
  "data": {
    "signInMyUser": {
      "token": "H0Q1S5jVIhF3AQDZ6SVJXOa72A==--RugVBwgq4KmaNhmc--di9zWGT5CYPcZEuEItt8ng==",
      "myUser": null
    }
  }
}
